<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="order">

	<insert id="getInfo" parameterType="orderDto">
		INSERT INTO ordertable
		(orderId, receiver, userId, userAddr, userPostal, userAddrDetail, tel, totalPrice, orderDate)
	 	values(orderId_seq.nextval, #{receiver}, #{userId}, #{userAddr}, #{userPostal}, #{userAddrDetail}, #{tel}, #{totalPrice}, SYSDATE + 1)
	</insert>
	
	<insert id="getInfo_Detail" parameterType="cartDto" >
		INSERT INTO ordertable_detail
		(orderId_detail, orderId, productId, amount_detail, userId)
		(SELECT orderId_detail_seq.nextval, #{orderId}, productId, amount, #{userId} FROM cart WHERE id=#{userId})
	</insert>
	 
	<select id="getOrderId" resultType="int">
		select max(orderId) as orderId from ordertable
	</select>
	
	<!-- 카트 비우기 -->
	<delete id="emptyCart" parameterType="string">
 		DELETE FROM cart
     	WHERE id = #{userId}
	</delete>
	<!-- 고객용 전체 주문 목록 -->
	<select id="orderList" resultType="orderDto">
		SELECT orderId, receiver, userId, userAddr, userPostal, userAddrDetail, tel, totalPrice, orderDate, delivery
		FROM ordertable
		where userId=#{userId}
		ORDER BY orderdate ASC
	</select>
	<!-- 고객용 특정 주문 목록 -->
	<select id="orderDetailList" resultType="com.acorn.project.order.dto.OrderListDto">
		 SELECT o.orderId, o.receiver, o.userId, o.userAddr, o.userPostal, o.userAddrDetail, o.tel, o.totalPrice, o.orderDate, o.delivery, d.orderId_detail, d.productId, d.amount_detail, p.productName, p.imagePath, p.price 
		 FROM ordertable o
		 INNER JOIN ordertable_detail d ON o.orderId = d.orderId
		 INNER JOIN product p ON d.productId = p.productId
		 WHERE o.userId=#{userId} AND o.orderId=#{orderId} 
		 ORDER BY orderId ASC
	</select>
	<!-- 관리자용 전체 주문 목록 -->
	<select id="AllOrderList" resultType="orderDto">
		SELECT orderId, receiver, userId, userAddr, userPostal, userAddrDetail, tel, totalPrice, orderDate, delivery
		FROM ordertable
		ORDER BY orderdate ASC
	</select>
	<!-- 관리자용 특정 주문 목록 -->
	<select id="AllOrderDetailList" resultType="com.acorn.project.order.dto.OrderListDto">
		 SELECT o.orderId, o.receiver, o.userId, o.userAddr, o.userPostal, o.userAddrDetail, o.tel, o.totalPrice, o.orderDate, o.delivery, d.orderId_detail, d.productId, d.amount_detail, p.productName, p.imagePath, p.price 
		 FROM ordertable o
		 INNER JOIN ordertable_detail d ON o.orderId = d.orderId
		 INNER JOIN product p ON d.productId = p.productId
		 WHERE o.orderId=#{orderId} 
		 ORDER BY orderId ASC
	</select>
	
	<!-- 주문시 재고 감소 -->
	<update id="stockReduce">
		UPDATE product
		SET stock = stock - #{stock}
		WHERE productId=#{productId}
	</update>
	
	<!-- 구매시 buycount 증가 -->
	<update id="buyCount" >
		UPDATE product
		SET buyCount = buyCount + #{stock}
		WHERE productId=#{productId}
	</update>
	
	<!-- 주문 취소,반품시 재고 다시 증가 -->
	<update id="stockIncrease" >
		UPDATE product
		SET stock = stock + #{stock}
		WHERE productId=#{productId}
	</update>
	
	<!-- 주문 취소,반품시 buyCount 다시 증가-->
	<update id="buyCountDown" >
		UPDATE product
		SET buyCount = buyCount - #{stock}
		WHERE productId=#{productId}
	</update>
	
	<!-- 배송 완료 -->
	<update id="delivered" parameterType="orderDto">
		UPDATE ordertable
		SET delivery = #{delivery}
		WHERE orderId=#{orderId}
	</update>
	
	<!-- 배송 완료 -->
	<update id="orderCancel" parameterType="orderDto">
		UPDATE ordertable
		SET delivery = #{delivery}
		WHERE orderId=#{orderId}
	</update>
	
	<!-- 배송 완료 -->
	<update id="orderReturn" parameterType="orderDto">
		UPDATE ordertable
		SET delivery = #{delivery}
		WHERE orderId=#{orderId}
	</update>
	
	<!-- 지난주 주문 내역 -->
	<select id="lastWeek" resultType="orderDto">
		SELECT *
		FROM ordertable
		WHERE orderdate BETWEEN TRUNC(SYSDATE -7, 'iw') AND TRUNC(SYSDATE, 'd') + 1
		ORDER BY orderdate ASC
	</select>
	
	<!-- 이번주 주문 내역 -->
	<select id="thisWeek" resultType="orderDto">
		SELECT *
		FROM ordertable
		WHERE orderdate BETWEEN TRUNC(SYSDATE, 'iw') AND TRUNC(SYSDATE + 7, 'day') + 1
		ORDER BY orderdate ASC
	</select>
</mapper>







